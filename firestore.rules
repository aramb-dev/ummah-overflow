rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Function to check if user is a moderator or admin
    function isModeratorOrAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userDoc != null && (userDoc.role == "moderator" || userDoc.role == "admin");
    }
    
    // Function to check if user is an admin
    function isAdmin() {
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      return userDoc != null && userDoc.role == "admin";
    }
    
    // Allow users to read their own data
    match /users/{userId} {
      allow read: if request.auth != null && (request.auth.uid == userId || isModeratorOrAdmin());
      allow write: if request.auth != null && (request.auth.uid == userId || isAdmin());
    }
    
    // Rules for questions collection
    match /questions/{questionId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // Rules for flags collection
    match /flags/{flagId} {
      allow read: if request.auth != null && isModeratorOrAdmin();
      allow write: if request.auth != null;
    }
    
    // Rules for tags collection
    match /tags/{tagId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
    
    // Rules for topics collection
    match /topics/{topicId} {
      allow read: if true;
      allow write: if request.auth != null && isAdmin();
    }
  }
}
